openapi: 3.0.0
info:
  title: 'Memestash Laravel Back-End'
  version: 0.1.0
  description: 'Back-end application based on the Laravel Framework, to be used with Memestash web and/or native app'
  contact: { name: 'Bo Robbrecht', email: bo.robbrecht@student.howest.be, url: 'https://git.ti.howest.be/TI/2020-2021/s4/web-and-mobile-technology/students/bo-robbrecht/memestash/laravel' }
servers:
  - { url: 'http://localhost', description: 'Local url for testing' }
tags:
  - name: Users
    description: All endpoints interacting mainly with users
paths:
  /users:
    get:
      summary: Get all users.
      description: Get all users and basic, non-sensitive information.
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/NameQuery"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ShortUser"
        '500':
          $ref: "#/components/responses/500"
    put:
      summary: Adds a new user
      description: Adds a new user. A body with the needed infomation **MUST** be provided
      tags:
        - Users
      requestBody:
        description: Describes the data needed to insert a new users
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShortUser"
        '400':
          $ref: "#/components/responses/400"
        '500':
          $ref: "#/components/responses/500"
  /users/{ouid}:
    get:
      summary: Gets specific info
      description: Gets the specific info of a user that is needed in order to make a home page.
      tags:
        - Users
      parameters:
        - in: path
          name: ouid
          required: true
          schema:
            type: integer
            example: 2
          description: The id associated with a users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '404':
          $ref: "#/components/responses/404"
        '500':
          $ref: "#/components/responses/500"

components:
  parameters:
    NameQuery:
      name: name
      in: query
      schema:
        type: string
      description: Filters the user by name
  schemas:
    ShortUser:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Ruiner
    NewUser:
      type: object
      properties:
        username:
          type: string
          example: "Ruiner"
        password:
          type: string
          format: password
          example: SomePassword
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Ruiner"
        wallet:
          type: integer
          example: 800000
        cards:
          type: array
          items:
            $ref: "#/components/schemas/Card"
    Card:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Card 1"
        description:
          type: string
          example: "This a card with a description"
        cost:
          type: integer
          example: 800
  responses:
    404:
      description: This object with the given ID could not be found
    500:
      description: Internal Server error
    400:
      description: The request body / query is not correct.
